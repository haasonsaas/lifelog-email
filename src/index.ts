import * as X from "./extractors";
import { fetchLifelogs, yesterday } from "./utils";
import type { ScheduledEvent, ExecutionContext } from "@cloudflare/workers-types";
import type { Env } from "./types";

export default {
  async scheduled(_: ScheduledEvent, env: Env, ctx: ExecutionContext) {
    ctx.waitUntil(runDigest(env));
  },

  async fetch(req: Request, env: Env) {
    const { pathname } = new URL(req.url);
    if (pathname === "/preview") {
      const { start, end } = yesterday(env.TIMEZONE || "America/Los_Angeles");
      const logs = await fetchLifelogs(start, end, env);
      const { html } = await extractDigest(logs, env);
      return new Response(html, { headers: { "content-type": "text/html" } });
    }
    if (pathname === "/test") {
      try {
        const { start, end } = yesterday(env.TIMEZONE || "America/Los_Angeles");
        const logs = await fetchLifelogs(start, end, env);
        const { subject, text, html } = await extractDigest(logs, env);
        await sendViaResend(env, subject, text, html);
        return new Response("Test email sent!");
      } catch (error: any) {
        console.error("Test endpoint error:", error);
        return new Response(`Error: ${error.message}`, { status: 500 });
      }
    }
    return new Response("OK");
  },
};

async function runDigest(env: Env) {
  const { start, end } = yesterday(env.TIMEZONE || "America/Los_Angeles");
  const logs = await fetchLifelogs(start, end, env);
  const { subject, text, html } = await extractDigest(logs, env);
  await sendViaResend(env, subject, text, html);
}

async function extractDigest(lifelogs: any[], env: Env) {
  // Define the extractors we want to use (excluding gpt_summary)
  const extractorNames = ['decisions', 'new_contacts', 'filler_score', 'action_items'] as const;
  
  // Run all extractors in parallel
  const results = await Promise.all(
    extractorNames.map(async (name) => {
      console.log("Running extractor:", name);
      const fn = X[name];
      if (!fn) throw new Error("Unknown extractor " + name);
      return fn(lifelogs, env);
    })
  );

  // Combine all results
  const now = new Date(new Date().toLocaleString("en-US", { timeZone: env.TIMEZONE || "America/Los_Angeles" }));
  now.setDate(now.getDate() - 1);
  const dateStr = now.toLocaleDateString("en-US", { weekday: 'long', month: 'long', day: 'numeric', year: 'numeric' });

  // Combine HTML and text content
  const combinedHtml = results.map(r => r.html).join('\n<hr style="margin: 20px 0; border: 0; border-top: 1px solid #eee;">\n');
  const combinedText = results.map(r => r.text).join('\n\n---\n\n');

  return {
    subject: `Your Daily Digest for ${dateStr}`,
    text: combinedText,
    html: wrapHtml(combinedHtml),
  };
}

async function sendViaResend(env: Env, subject: string, text: string, html: string) {
  const payload = {
    from: env.FROM_EMAIL,
    to: env.TO_EMAIL,
    subject,
    text,
    html,
  };

  const res = await fetch('https://api.resend.com/emails', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${env.RESEND_API_KEY}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(payload),
  });

  if (!res.ok) {
    const text = await res.text();
    throw new Error("Resend error " + res.status + ": " + text);
  }
}

function wrapHtml(innerHtml: string): string {
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <title>Daily Digest</title>
      <style>
        body {
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
          line-height: 1.6;
          color: #333;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        h1 {
          color: #2c3e50;
          border-bottom: 2px solid #eee;
          padding-bottom: 10px;
          margin-bottom: 20px;
        }
        h2 {
          color: #34495e;
          margin-top: 30px;
        }
        ul {
          padding-left: 20px;
        }
        li {
          margin-bottom: 8px;
        }
        hr {
          margin: 30px 0;
          border: 0;
          border-top: 1px solid #eee;
        }
        .header {
          text-align: center;
          margin-bottom: 30px;
        }
        .footer {
          text-align: center;
          margin-top: 30px;
          padding-top: 20px;
          border-top: 2px solid #eee;
          color: #666;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Your Daily Digest</h1>
      </div>
      ${innerHtml}
      <div class="footer">
        <p>Generated by Limitless Digest ðŸª„</p>
      </div>
    </body>
    </html>
  `;
}
